# ÂàóÊåôÂûãÔºàEnumÔºâÂÆåÂÖ®„Ç¨„Ç§„Éâ üéì

---

## üìò Êó•Êú¨Ë™û„Çª„ÇØ„Ç∑„Éß„É≥ - Êñ∞‰∫∫„Ç®„É≥„Ç∏„Éã„Ç¢Âêë„Åë

### ÂàóÊåôÂûã„Å£„Å¶‰ΩïÔºü

**ÂàóÊåôÂûãÔºàEnumÔºâ= Ê±∫„Åæ„Å£„ÅüÈÅ∏ÊäûËÇ¢„ÅÆÈõÜ„Åæ„Çä**

‰æã„Åà„Å∞Ôºö
- ‰ø°Âè∑Ê©ü ‚Üí „ÄåËµ§„Äç„ÄåÈªÑ„Äç„ÄåÈùí„Äç„ÅÆ3„Å§„Å†„Åë
- ÊõúÊó• ‚Üí „ÄåÊúà„Äç„ÄåÁÅ´„Äç„ÄåÊ∞¥„Äç...„ÄåÊó•„Äç„ÅÆ7„Å§„Å†„Åë
- ÊÄßÂà• ‚Üí „ÄåÁî∑ÊÄß„Äç„ÄåÂ•≥ÊÄß„Äç„Äå„Åù„ÅÆ‰ªñ„Äç„ÅÆ3„Å§„Å†„Åë

**„Éó„É≠„Ç∞„É©„É†„Åß„Äå„Åì„ÅÆ3„Å§‰ª•Â§ñ„ÅØ‰Ωø„Åà„Å™„ÅÑÔºÅ„Äç„Å®Ê±∫„ÇÅ„Çã„ÅÆ„ÅåÂàóÊåôÂûã„Åß„Åô„ÄÇ**

---

### „Å™„ÅúÂàóÊåôÂûã„Çí‰Ωø„ÅÜ„ÅÆÔºü

#### ‚ùå ÊÇ™„ÅÑ‰æãÔºöÊñáÂ≠óÂàó„ÇíÁõ¥Êé•‰Ωø„ÅÜ

```python
# ÊñáÂ≠óÂàó„ÅßÊÄßÂà•„ÇíÁÆ°ÁêÜÔºàÂç±Èô∫ÔºÅÔºâ
gender = "Áî∑ÊÄß"
gender = "Áî∑"      # „Çø„Ç§„ÉùÔºÅ„Åß„ÇÇ„Ç®„É©„Éº„Å´„Å™„Çâ„Å™„ÅÑ
gender = "Male"    # Ëã±Ë™û„ÅßÊõ∏„ÅÑ„Å°„ÇÉ„Å£„ÅüÔºÅ
gender = "„Åä„Å®„Åì"  # „Éê„É™„Ç®„Éº„Ç∑„Éß„É≥Â§ö„Åô„ÅéÔºÅ
```

**ÂïèÈ°åÁÇπÔºö**
- „Çø„Ç§„ÉùÔºàtypoÔºöÊâì„Å°ÈñìÈÅï„ÅÑÔºâ„Å´Ê∞ó„Å•„Åë„Å™„ÅÑ
- ‰∫∫„Å´„Çà„Å£„Å¶Êõ∏„ÅçÊñπ„Åå„Éê„É©„Éê„É©
- „Éê„Ç∞„ÅÆÊ∏©Â∫ä„Å´„Å™„Çã

#### ‚úÖ ËâØ„ÅÑ‰æãÔºöÂàóÊåôÂûã„Çí‰Ωø„ÅÜ

```python
from enum import Enum

class Gender(Enum):
    MALE = "Áî∑ÊÄß"
    FEMALE = "Â•≥ÊÄß"
    OTHER = "„Åù„ÅÆ‰ªñ"

# ‰Ωø„ÅÑÊñπ
gender = Gender.MALE  # „Åì„Çå„Åó„ÅãÈÅ∏„Åπ„Å™„ÅÑÔºÅ
# gender = Gender.MAN  # „Ç®„É©„ÉºÔºÅÂ≠òÂú®„Åó„Å™„ÅÑÈÅ∏ÊäûËÇ¢
```

**„É°„É™„ÉÉ„ÉàÔºö**
- ‚úÖ „Çø„Ç§„Éù„Åó„Åü„ÇâÂç≥„Ç®„É©„Éº
- ‚úÖ ÈÅ∏ÊäûËÇ¢„ÅåÊòéÁ¢∫
- ‚úÖ IDE„ÅßÂÄôË£ú„ÅåÂá∫„ÇãÔºàË£úÂÆåÊ©üËÉΩÔºâ

---

### ÂàóÊåôÂûã„ÅÆÂü∫Êú¨ÁöÑ„Å™Êõ∏„ÅçÊñπ

```python
from enum import Enum

# Step 1: Enum„ÇØ„É©„Çπ„ÇíÁ∂ôÊâø
class TrafficLight(Enum):
    # Step 2: ÈÅ∏ÊäûËÇ¢„ÇíÂÆöÁæ©ÔºàÂ§ßÊñáÂ≠óÔºã„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅåÊÖ£ÁøíÔºâ
    RED = "Ëµ§"      # RED „ÅåÂêçÂâç„ÄÅ"Ëµ§" „ÅåÂÄ§
    YELLOW = "ÈªÑ"
    GREEN = "Èùí"

# Step 3: ‰Ωø„ÅÜ
light = TrafficLight.RED
print(light)        # TrafficLight.RED
print(light.name)   # RED
print(light.value)  # Ëµ§
```

---

### ÂÆüË∑µ‰æãÔºöÊõúÊó•„ÇíÂàóÊåôÂûã„ÅßÁÆ°ÁêÜ

```python
from enum import Enum

class Weekday(Enum):
    """ÊõúÊó•„ÇíË°®„ÅôÂàóÊåôÂûã"""
    MONDAY = "ÊúàÊõúÊó•"
    TUESDAY = "ÁÅ´ÊõúÊó•"
    WEDNESDAY = "Ê∞¥ÊõúÊó•"
    THURSDAY = "Êú®ÊõúÊó•"
    FRIDAY = "ÈáëÊõúÊó•"
    SATURDAY = "ÂúüÊõúÊó•"
    SUNDAY = "Êó•ÊõúÊó•"

# ‰ΩøÁî®‰æã
today = Weekday.MONDAY
print(f"‰ªäÊó•„ÅØ{today.value}„Åß„Åô")  # ‰ªäÊó•„ÅØÊúàÊõúÊó•„Åß„Åô

# ÊõúÊó•„Åî„Å®„Å´Âá¶ÁêÜ„ÇíÂàÜ„Åë„Çã
if today == Weekday.SATURDAY or today == Weekday.SUNDAY:
    print("ÈÄ±Êú´„Å†ÔºÅ‰ºë„ÇÇ„ÅÜÔºÅ")
else:
    print("‰ªï‰∫ã„ÅÆÊó•...")
```

---

### ÂàóÊåôÂûã„ÅßÊï∞ÂÄ§„ÇÇ‰Ωø„Åà„Çã

```python
from enum import Enum

class Priority(Enum):
    """ÂÑ™ÂÖàÂ∫¶„ÇíË°®„ÅôÂàóÊåôÂûã"""
    LOW = 1      # ‰Ωé
    MEDIUM = 2   # ‰∏≠
    HIGH = 3     # È´ò
    CRITICAL = 4 # Á∑äÊÄ•

# ‰ΩøÁî®‰æã
task_priority = Priority.HIGH
print(task_priority.value)  # 3

# Êï∞ÂÄ§„ÅßÊØîËºÉ
if task_priority.value >= 3:
    print("ÈáçË¶Å„Å™„Çø„Çπ„ÇØ„Åß„ÅôÔºÅ")
```

---

### ÂàóÊåôÂûã„ÅÆ‰æøÂà©„Å™Ê©üËÉΩ

#### 1. „Åô„Åπ„Å¶„ÅÆÈÅ∏ÊäûËÇ¢„ÇíÂèñÂæó

```python
from enum import Enum

class Color(Enum):
    RED = "Ëµ§"
    BLUE = "Èùí"
    GREEN = "Á∑ë"

# „Åô„Åπ„Å¶„ÅÆËâ≤„ÇíË°®Á§∫
for color in Color:
    print(f"{color.name}: {color.value}")

# Âá∫Âäõ:
# RED: Ëµ§
# BLUE: Èùí
# GREEN: Á∑ë
```

#### 2. ÊñáÂ≠óÂàó„Åã„ÇâÂàóÊåôÂûã„Å´Â§âÊèõ

```python
from enum import Enum

class Size(Enum):
    SMALL = "S"
    MEDIUM = "M"
    LARGE = "L"

# ÊñáÂ≠óÂàó "SMALL" „Åã„ÇâÂàóÊåôÂûã„Å´Â§âÊèõ
size = Size["SMALL"]
print(size.value)  # S

# ÂÄ§ "M" „Åã„ÇâÂàóÊåôÂûã„ÇíÊé¢„Åô
size = Size("M")
print(size)  # Size.MEDIUM
```

---

### „Çà„Åè„ÅÇ„ÇãÈñìÈÅï„ÅÑ„Å®ÂØæÂá¶Ê≥ï

#### ‚ùå ÈñìÈÅï„ÅÑ1ÔºöÂÄ§„ÇíÁõ¥Êé•‰ª£ÂÖ•

```python
class Status(Enum):
    ACTIVE = "ÊúâÂäπ"
    INACTIVE = "ÁÑ°Âäπ"

# ‚ùå „Åì„Çå„ÅØ„ÉÄ„É°ÔºÅ
status = "ÊúâÂäπ"

# ‚úÖ „Åì„ÅÜ„Åô„ÇãÔºÅ
status = Status.ACTIVE
```

#### ‚ùå ÈñìÈÅï„ÅÑ2ÔºöÂàóÊåôÂûã„ÅÆÂÄ§„ÇíÂ§âÊõ¥„Åó„Çà„ÅÜ„Å®„Åô„Çã

```python
class Color(Enum):
    RED = "Ëµ§"

# ‚ùå „Åì„Çå„ÅØ„Ç®„É©„ÉºÔºÅÂàóÊåôÂûã„ÅØÂ§âÊõ¥‰∏çÂèØ
# Color.RED = "Èùí"

# ÂàóÊåôÂûã„ÅØ„Äå‰∏çÂ§âÔºàimmutableÔºâ„Äç= Â§âÊõ¥„Åß„Åç„Å™„ÅÑ
```

#### ‚ùå ÈñìÈÅï„ÅÑ3ÔºöÊØîËºÉ„ÇíÈñìÈÅï„Åà„Çã

```python
class Gender(Enum):
    MALE = "Áî∑ÊÄß"

gender = Gender.MALE

# ‚ùå ÂÄ§„ÅßÊØîËºÉ„Åô„Çã„ÅÆ„ÅØNG
if gender == "Áî∑ÊÄß":  # False „Å´„Å™„ÇãÔºÅ
    print("Áî∑ÊÄß„Åß„Åô")

# ‚úÖ ÂàóÊåôÂûãÂêåÂ£´„ÅßÊØîËºÉ
if gender == Gender.MALE:  # „Åì„Çå„ÅåÊ≠£Ëß£
    print("Áî∑ÊÄß„Åß„Åô")

# ‚úÖ „Åæ„Åü„ÅØÂÄ§„ÇíÂèñ„ÇäÂá∫„Åó„Å¶ÊØîËºÉ
if gender.value == "Áî∑ÊÄß":
    print("Áî∑ÊÄß„Åß„Åô")
```

---

### ÂÆüË∑µÔºöÂΩπËÅ∑„ÅÆÂàóÊåôÂûãÔºàË§áÊï∞„ÅÆÂÄ§„ÇíÊåÅ„Å§Ôºâ

```python
from enum import Enum

class Post(Enum):
    """ÂΩπËÅ∑„ÇíË°®„ÅôÂàóÊåôÂûãÔºàË§áÊï∞„ÅÆÊÉÖÂ†±„Çí‰øùÊåÅÔºâ"""
    # (È†ÜÂ∫è, ÂΩπËÅ∑Âêç, ÊâãÂΩì)
    GENERAL = (0, "‰∏ÄËà¨", 0)
    CHIEF = (1, "‰∏ª‰ªª", 20000)
    MANAGER = (2, "Ë™≤Èï∑", 50000)
    
    def __init__(self, order, title, allowance):
        """Ë§áÊï∞„ÅÆÂÄ§„ÇíÊåÅ„Å§ÂàóÊåôÂûã„ÅÆÂàùÊúüÂåñ"""
        self.order = order          # È†ÜÂ∫è
        self.title = title          # ÂΩπËÅ∑Âêç
        self.allowance = allowance  # ÊâãÂΩì

# ‰ΩøÁî®‰æã
post = Post.CHIEF
print(post.title)      # ‰∏ª‰ªª
print(post.allowance)  # 20000
print(post.order)      # 1
```

---

### „Åæ„Å®„ÇÅ„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà ‚úÖ

Êñ∞‰∫∫„Ç®„É≥„Ç∏„Éã„Ç¢„ÅåË¶ö„Åà„Çã„Åπ„Åç„Åì„Å®Ôºö

1. ‚úÖ **ÂàóÊåôÂûã„ÅØ„ÄåÊ±∫„Åæ„Å£„ÅüÈÅ∏ÊäûËÇ¢„Äç„ÇíË°®„Åô**
2. ‚úÖ **`from enum import Enum` „Åß„Ç§„É≥„Éù„Éº„Éà**
3. ‚úÖ **`class ÂêçÂâç(Enum):` „ÅßÂÆöÁæ©**
4. ‚úÖ **`.name` „ÅßÂêçÂâç„ÄÅ`.value` „ÅßÂÄ§„ÇíÂèñÂæó**
5. ‚úÖ **ÊñáÂ≠óÂàó„Åß„ÅØ„Å™„ÅèÂàóÊåôÂûã„ÅßÊØîËºÉ„Åô„Çã**
6. ‚úÖ **„Çø„Ç§„ÉùÈò≤Ê≠¢„Éª‰øùÂÆàÊÄßÂêë‰∏ä„ÅÆ„Åü„ÇÅ„Å´‰Ωø„ÅÜ**

---

## üìò English Section - For Junior Engineers

### What is Enum?

**Enum (Enumeration) = A fixed set of choices**

For example:
- Traffic Light ‚Üí Only "Red", "Yellow", "Green"
- Days of Week ‚Üí Only "Mon", "Tue", ... "Sun"
- Gender ‚Üí Only "Male", "Female", "Other"

**Enum restricts values to predefined options in your program.**

---

### Why Use Enum?

#### ‚ùå Bad Example: Using Raw Strings

```python
# Using strings directly (Dangerous!)
gender = "Male"
gender = "male"     # Typo! But no error
gender = "M"        # Inconsistent!
gender = "man"      # Too many variations!
```

**Problems:**
- Typos go unnoticed
- Inconsistent usage
- Source of bugs

#### ‚úÖ Good Example: Using Enum

```python
from enum import Enum

class Gender(Enum):
    MALE = "Male"
    FEMALE = "Female"
    OTHER = "Other"

# Usage
gender = Gender.MALE  # Only valid options!
# gender = Gender.MAN  # Error! Doesn't exist
```

**Benefits:**
- ‚úÖ Immediate error on typos
- ‚úÖ Clear choices
- ‚úÖ IDE autocomplete support

---

### Basic Enum Syntax

```python
from enum import Enum

# Step 1: Inherit from Enum
class TrafficLight(Enum):
    # Step 2: Define options (UPPERCASE convention)
    RED = "red"       # RED is name, "red" is value
    YELLOW = "yellow"
    GREEN = "green"

# Step 3: Use it
light = TrafficLight.RED
print(light)        # TrafficLight.RED
print(light.name)   # RED
print(light.value)  # red
```

---

### Practical Example: Days of Week

```python
from enum import Enum

class Weekday(Enum):
    """Enum representing days of the week"""
    MONDAY = "Monday"
    TUESDAY = "Tuesday"
    WEDNESDAY = "Wednesday"
    THURSDAY = "Thursday"
    FRIDAY = "Friday"
    SATURDAY = "Saturday"
    SUNDAY = "Sunday"

# Usage
today = Weekday.MONDAY
print(f"Today is {today.value}")  # Today is Monday

# Conditional logic
if today == Weekday.SATURDAY or today == Weekday.SUNDAY:
    print("It's the weekend!")
else:
    print("It's a workday...")
```

---

### Enum with Numeric Values

```python
from enum import Enum

class Priority(Enum):
    """Priority levels"""
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    CRITICAL = 4

# Usage
task_priority = Priority.HIGH
print(task_priority.value)  # 3

# Numeric comparison
if task_priority.value >= 3:
    print("Important task!")
```

---

### Useful Enum Features

#### 1. Iterate All Options

```python
from enum import Enum

class Color(Enum):
    RED = "red"
    BLUE = "blue"
    GREEN = "green"

# Display all colors
for color in Color:
    print(f"{color.name}: {color.value}")

# Output:
# RED: red
# BLUE: blue
# GREEN: green
```

#### 2. Convert String to Enum

```python
from enum import Enum

class Size(Enum):
    SMALL = "S"
    MEDIUM = "M"
    LARGE = "L"

# Convert string "SMALL" to Enum
size = Size["SMALL"]
print(size.value)  # S

# Find Enum by value "M"
size = Size("M")
print(size)  # Size.MEDIUM
```

---

### Common Mistakes and Solutions

#### ‚ùå Mistake 1: Assigning Raw Values

```python
class Status(Enum):
    ACTIVE = "active"
    INACTIVE = "inactive"

# ‚ùå Don't do this!
status = "active"

# ‚úÖ Do this!
status = Status.ACTIVE
```

#### ‚ùå Mistake 2: Trying to Modify Enum

```python
class Color(Enum):
    RED = "red"

# ‚ùå This raises an error! Enums are immutable
# Color.RED = "blue"

# Enums are immutable (cannot be changed)
```

#### ‚ùå Mistake 3: Wrong Comparison

```python
class Gender(Enum):
    MALE = "Male"

gender = Gender.MALE

# ‚ùå Comparing with value is wrong
if gender == "Male":  # Returns False!
    print("Male")

# ‚úÖ Compare Enum to Enum
if gender == Gender.MALE:  # Correct
    print("Male")

# ‚úÖ Or extract value and compare
if gender.value == "Male":
    print("Male")
```

---

### Advanced: Enum with Multiple Values

```python
from enum import Enum

class Post(Enum):
    """Job position with multiple attributes"""
    # (order, title, allowance)
    GENERAL = (0, "General", 0)
    CHIEF = (1, "Chief", 20000)
    MANAGER = (2, "Manager", 50000)
    
    def __init__(self, order, title, allowance):
        """Initialize Enum with multiple values"""
        self.order = order          # Order
        self.title = title          # Job title
        self.allowance = allowance  # Salary allowance

# Usage
post = Post.CHIEF
print(post.title)      # Chief
print(post.allowance)  # 20000
print(post.order)      # 1
```

---

### Summary Checklist ‚úÖ

What Junior Engineers Should Remember:

1. ‚úÖ **Enum represents "fixed choices"**
2. ‚úÖ **Import with `from enum import Enum`**
3. ‚úÖ **Define with `class Name(Enum):`**
4. ‚úÖ **Access name with `.name`, value with `.value`**
5. ‚úÖ **Compare using Enum, not strings**
6. ‚úÖ **Use for typo prevention and maintainability**

---

## üéØ ÂÆüË∑µÂïèÈ°åÔºàPractice ExercisesÔºâ

### ÂïèÈ°å1ÔºöHTTP„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ„ÇíÂàóÊåôÂûã„Åß‰Ωú„Çã
**Create HTTP status codes as Enum**

```python
from enum import Enum

class HttpStatus(Enum):
    """HTTP„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ / HTTP Status Codes"""
    OK = 200
    CREATED = 201
    BAD_REQUEST = 400
    UNAUTHORIZED = 401
    NOT_FOUND = 404
    INTERNAL_SERVER_ERROR = 500

# ‰ΩøÁî®‰æã / Usage
status = HttpStatus.OK
print(f"Status: {status.value}")  # Status: 200

if status == HttpStatus.OK:
    print("Success!")
```

### ÂïèÈ°å2ÔºöÂ≠£ÁØÄ„ÇíÂàóÊåôÂûã„Åß‰Ωú„Çã
**Create seasons as Enum**

```python
from enum import Enum

class Season(Enum):
    """Â≠£ÁØÄ / Seasons"""
    SPRING = "Êò• / Spring"
    SUMMER = "Â§è / Summer"
    AUTUMN = "Áßã / Autumn"
    WINTER = "ÂÜ¨ / Winter"

# ‰ΩøÁî®‰æã / Usage
current_season = Season.SPRING
print(current_season.value)  # Êò• / Spring
```

---

## üöÄ Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„ÉóÔºàNext StepsÔºâ

ÂàóÊåôÂûã„Çí„Éû„Çπ„Çø„Éº„Åó„Åü„Çâ„ÄÅÊ¨°„ÅØ„Åì„Çå„ÇíÂ≠¶„Å≥„Åæ„Åó„Çá„ÅÜÔºÅ

**After mastering Enum, learn these next:**

1. **„Éá„Éº„Çø„ÇØ„É©„ÇπÔºàDataclassesÔºâ** - Ë§áÈõë„Å™„Éá„Éº„ÇøÊßãÈÄ†
2. **Âûã„Éí„É≥„ÉàÔºàType HintsÔºâ** - `def func(gender: Gender):`
3. **„Éá„Ç∂„Ç§„É≥„Éë„Çø„Éº„É≥** - ÂàóÊåôÂûã„Çí‰Ωø„Å£„ÅüË®≠Ë®à

Ë≥™Âïè„Åå„ÅÇ„Çå„Å∞„Å©„ÅÜ„ÅûÔºÅ üéì
**Feel free to ask questions!** üéì
