業務手順書のテクニカルライティングについて、実践的なガイドを作ります！

## 業務手順書の基本構成

### テンプレート

```markdown
# 【手順書名】

## 1. 文書情報
- 文書ID: DOC-XXX-001
- 作成日: 2025-10-31
- 作成者: 山田太郎
- 最終更新日: 2025-10-31
- 更新者: 山田太郎
- バージョン: 1.0
- 承認者: 鈴木部長

## 2. 目的
この手順書は〇〇を実施するためのものです。

## 3. 対象者
- 新入社員
- 担当部署の全員
- システム管理者

## 4. 前提条件
- 〇〇へのアクセス権限がある
- △△がインストールされている
- □□の知識がある

## 5. 所要時間
約30分

## 6. 手順

### 6.1 準備
1. 必要なものを用意する
2. システムにログインする

### 6.2 実施
1. 〇〇を開く
2. △△をクリックする
3. □□を入力する

### 6.3 完了確認
1. 結果を確認する
2. ログを確認する

## 7. トラブルシューティング
### エラーが出た場合
- 原因: 〇〇
- 対処法: △△

## 8. 注意事項
- 本番環境では慎重に実施する
- バックアップを取得する

## 9. 関連資料
- 参考URL
- 関連手順書

## 10. 更新履歴
| 日付 | バージョン | 更新者 | 更新内容 |
|------|-----------|--------|----------|
| 2025-10-31 | 1.0 | 山田 | 新規作成 |
```

## 手順書の書き方ルール

### 1. タイトルの付け方

```
❌ NG:
- 手順書
- やり方
- マニュアル

✅ OK:
- 【新規ユーザー登録手順】
- 【サーバー再起動手順書】
- 【月次レポート作成マニュアル】

ルール:
- 【】で囲む
- 何をするのか明確に
- 検索しやすい名前
```

### 2. 手順の書き方

```
❌ NG（曖昧）:
適当にボタンを押して設定する

✅ OK（明確）:
1. 画面右上の「設定」ボタンをクリックする
2. 「ユーザー管理」を選択する
3. 「新規追加」をクリックする

ルール:
- 1ステップ1アクション
- 番号を振る
- 具体的に書く
- 画像を付ける
```

### 3. 動詞の統一

```
統一する動詞:

✅ 推奨:
- クリックする（押下する ×）
- 入力する（記入する ×）
- 選択する（選ぶ ×）
- 確認する（チェックする ×）
- 保存する（セーブする ×）

プロジェクトで統一表を作る
```

### 4. 画像の使い方

```
✅ 良い画像:
- 必要な部分を赤枠で囲む
- 矢印で操作箇所を示す
- 番号を振る
- 適切なサイズ

❌ 悪い画像:
- 画面全体（どこを見るか不明）
- 小さすぎる
- ぼやけている
```

## 実例1: システム操作手順

```markdown
# 【新規ユーザー登録手順】

## 1. 文書情報
- 文書ID: SYS-001
- 作成日: 2025-10-31
- 作成者: 山田太郎
- バージョン: 1.0

## 2. 目的
新規ユーザーをシステムに登録する

## 3. 対象者
- 管理者権限を持つユーザー

## 4. 前提条件
- 管理者アカウントでログインしている
- ユーザー情報（名前、メールアドレス）を用意している

## 5. 所要時間
約5分

## 6. 手順

### 6.1 ユーザー管理画面を開く

1. 画面左側のメニューから「管理」をクリックする

   ![メニュー画面](images/menu.png)

2. 「ユーザー管理」をクリックする

### 6.2 新規ユーザーを追加

1. 画面右上の「新規追加」ボタンをクリックする

   ![新規追加ボタン](images/add_button.png)

2. 必要な情報を入力する

   | 項目 | 入力内容 | 必須 | 例 |
   |------|---------|------|-----|
   | 氏名 | ユーザーの氏名 | ○ | 山田太郎 |
   | メールアドレス | 会社のメール | ○ | taro@example.com |
   | 部署 | 所属部署 | ○ | 営業部 |
   | 権限 | ユーザー権限 | ○ | 一般ユーザー |

3. 「確認」ボタンをクリックする

4. 入力内容を確認し、「登録」ボタンをクリックする

### 6.3 完了確認

1. 「登録が完了しました」というメッセージが表示される

2. ユーザー一覧に新しいユーザーが追加されていることを確認する

3. 登録したメールアドレスに招待メールが送信される

## 7. トラブルシューティング

### 「メールアドレスが既に登録されています」と表示される

**原因**: 同じメールアドレスが既に存在する

**対処法**:
1. ユーザー一覧で既存ユーザーを検索する
2. 既存ユーザーが不要な場合は削除する
3. 必要な場合は別のメールアドレスを使用する

### 「登録」ボタンがグレーアウトして押せない

**原因**: 必須項目が未入力

**対処法**:
1. すべての必須項目（○マーク）を確認する
2. 未入力の項目に情報を入力する

## 8. 注意事項

⚠️ 重要:
- メールアドレスは必ず会社ドメインを使用する
- 権限設定を間違えないように確認する
- テスト環境で一度試してから本番環境で実施する

## 9. 関連資料
- [ユーザー権限一覧](link)
- [パスワードポリシー](link)

## 10. 更新履歴
| 日付 | Ver | 更新者 | 内容 |
|------|-----|--------|------|
| 2025-10-31 | 1.0 | 山田 | 新規作成 |
```

## 実例2: コマンド実行手順

```markdown
# 【サーバー再起動手順】

## 1. 文書情報
- 文書ID: OPS-001
- 対象環境: 本番サーバー
- 危険度: 高

## 2. 目的
Webサーバーを安全に再起動する

## 3. 対象者
- インフラチーム
- 当番エンジニア

## 4. 前提条件
- SSHでサーバーに接続できる
- sudo権限がある
- 事前に関係者に通知済み

## 5. 所要時間
約10分（ダウンタイム: 約1分）

## 6. 実施タイミング
- 定期メンテナンス: 毎週日曜日 AM 2:00
- 緊急時: 障害発生時

## 7. 手順

### 7.1 事前確認

1. 現在の状態を確認する

   ```bash
   # サービスの状態確認
   sudo systemctl status nginx
   
   # 期待される出力
   # ● nginx.service - nginx
   #    Active: active (running)
   ```

2. 現在の接続数を確認する

   ```bash
   # アクティブな接続数確認
   netstat -an | grep :80 | wc -l
   
   # 100以下なら実施可能
   ```

3. ログのバックアップを取る

   ```bash
   # ログをバックアップ
   sudo cp /var/log/nginx/error.log /var/log/nginx/error.log.$(date +%Y%m%d)
   ```

### 7.2 再起動実施

1. サービスを停止する

   ```bash
   sudo systemctl stop nginx
   ```

   ⏱️ 待機時間: 5秒

2. 停止を確認する

   ```bash
   sudo systemctl status nginx
   
   # 期待される出力
   # Active: inactive (dead)
   ```

3. サービスを起動する

   ```bash
   sudo systemctl start nginx
   ```

4. 起動を確認する

   ```bash
   sudo systemctl status nginx
   
   # 期待される出力
   # Active: active (running)
   ```

### 7.3 動作確認

1. Webサイトにアクセスできることを確認する

   ```bash
   curl -I http://example.com
   
   # 期待される出力
   # HTTP/1.1 200 OK
   ```

2. エラーログを確認する

   ```bash
   sudo tail -f /var/log/nginx/error.log
   
   # エラーがないことを確認
   ```

3. 監視画面を確認する
   - Datadogのダッシュボードでエラー率をチェック
   - 正常値: エラー率 < 0.1%

## 8. ロールバック手順

問題が発生した場合:

1. 古い設定に戻す

   ```bash
   sudo cp /etc/nginx/nginx.conf.backup /etc/nginx/nginx.conf
   ```

2. 再起動する

   ```bash
   sudo systemctl restart nginx
   ```

3. 関係者に報告する

## 9. トラブルシューティング

### サービスが起動しない

```bash
# エラーログ確認
sudo journalctl -u nginx -n 50

# 設定ファイルのチェック
sudo nginx -t

# 一般的な原因:
# - ポート80が使用中
# - 設定ファイルの文法エラー
# - ディスク容量不足
```

### 503エラーが出る

```bash
# バックエンドの確認
sudo systemctl status app-server

# バックエンドを再起動
sudo systemctl restart app-server
```

## 10. 注意事項

🚨 危険:
- 本番環境での実施は必ず承認を得る
- ピーク時間（10:00-18:00）は避ける
- 必ずバックアップを取る

✅ チェックリスト:
- [ ] 関係者に通知した
- [ ] バックアップを取った
- [ ] 接続数を確認した
- [ ] 監視画面を開いている

## 11. 連絡先
- 緊急時: Slack #incident チャンネル
- インフラチーム: infra@example.com
- オンコール担当: 090-XXXX-XXXX

## 12. 更新履歴
| 日付 | Ver | 更新者 | 内容 |
|------|-----|--------|------|
| 2025-10-31 | 1.0 | 山田 | 新規作成 |
| 2025-11-15 | 1.1 | 佐藤 | ロールバック手順追加 |
```

## 実例3: 月次レポート作成手順

```markdown
# 【月次レポート作成手順】

## 1. 文書情報
- 文書ID: RPT-001
- 実施頻度: 毎月末

## 2. 目的
月次レポートを作成し、経営層に報告する

## 3. 対象者
- 各部門のリーダー

## 4. 所要時間
約2時間

## 5. 手順

### 5.1 データ収集（所要時間: 30分）

1. Googleスプレッドシートを開く
   - URL: https://docs.google.com/spreadsheets/...
   - シート名: 「月次データ」

2. データをエクスポートする
   - 「ファイル」→「ダウンロード」→「CSV」を選択
   - ファイル名: `monthly_data_YYYYMM.csv`

3. データベースからデータを取得する

   ```sql
   -- ユーザー数集計
   SELECT 
       DATE_TRUNC('day', created_at) as date,
       COUNT(*) as user_count
   FROM users
   WHERE created_at >= '2025-10-01'
     AND created_at < '2025-11-01'
   GROUP BY DATE_TRUNC('day', created_at)
   ORDER BY date;
   ```

   - 結果をCSVで保存: `user_stats_202510.csv`

### 5.2 データ分析（所要時間: 45分）

1. Pythonスクリプトを実行する

   ```bash
   # 環境を有効化
   source venv/bin/activate
   
   # スクリプト実行
   python analyze_monthly_data.py --month 2025-10
   
   # 出力ファイル
   # - summary_202510.json
   # - charts/
   ```

2. 集計結果を確認する
   - 新規ユーザー数
   - アクティブユーザー数
   - 売上推移
   - エラー率

### 5.3 レポート作成（所要時間: 45分）

1. テンプレートをコピーする
   - Google Drive: 「月次レポートテンプレート」
   - コピー先: 「月次レポート_2025年10月」

2. データを記入する

   | セクション | 記入内容 | データソース |
   |-----------|---------|-------------|
   | サマリー | 重要指標 | summary.json |
   | ユーザー数 | グラフ | charts/users.png |
   | 売上 | グラフと表 | charts/revenue.png |
   | 課題 | 箇条書き | 手動入力 |

3. グラフを挿入する
   - 「挿入」→「画像」→「ドライブから画像を選択」
   - charts フォルダから該当画像を選択

4. コメントを記入する
   - 前月比の変化
   - 特筆すべき事項
   - 来月の予測

### 5.4 レビュー依頼（所要時間: 10分）

1. レポートを共有する
   - 共有先: チームリーダー全員
   - 権限: コメント可

2. Slackで通知する

   ```
   @channel
   10月の月次レポートを作成しました。
   月末までにレビューをお願いします。
   
   レポート: [リンク]
   期限: 10月31日
   ```

3. コメントに対応する
   - 修正が必要な箇所を更新
   - 不明点を確認

### 5.5 提出（所要時間: 10分）

1. 最終確認する
   - [ ] 数値に誤りがないか
   - [ ] グラフが正しく表示されているか
   - [ ] 誤字脱字がないか

2. PDFでエクスポートする
   - 「ファイル」→「ダウンロード」→「PDF」
   - ファイル名: `月次レポート_2025年10月.pdf`

3. 提出する
   - 宛先: keiei@example.com
   - 件名: 【提出】2025年10月 月次レポート
   - 本文テンプレート:

   ```
   お疲れ様です。
   
   2025年10月の月次レポートを提出いたします。
   
   【概要】
   - 新規ユーザー: XXX人（前月比+X%）
   - 売上: XXX万円（前月比+X%）
   
   【今月のトピック】
   - XXXXX
   
   詳細は添付ファイルをご確認ください。
   
   よろしくお願いいたします。
   ```

## 6. チェックリスト

### データ収集
- [ ] スプレッドシートをダウンロードした
- [ ] DBからデータを取得した
- [ ] ファイル名が正しい

### レポート作成
- [ ] テンプレートをコピーした
- [ ] すべてのセクションを記入した
- [ ] グラフを挿入した
- [ ] コメントを記入した

### 提出前
- [ ] レビューを受けた
- [ ] 数値を確認した
- [ ] PDFを作成した
- [ ] メールを送信した

## 7. トラブルシューティング

### データが取得できない

**症状**: SQLエラーが出る

**対処法**:
1. VPN接続を確認する
2. DBの接続情報を確認する
3. インフラチームに問い合わせる

### グラフが表示されない

**症状**: Pythonスクリプトがエラーになる

**対処法**:
```bash
# パッケージ再インストール
pip install -r requirements.txt

# キャッシュ削除
rm -rf __pycache__
```

## 8. 関連資料
- [データ分析ガイド](link)
- [レポートテンプレート](link)
- [過去のレポート一覧](link)

## 9. 更新履歴
| 日付 | Ver | 更新者 | 内容 |
|------|-----|--------|------|
| 2025-10-31 | 1.0 | 山田 | 新規作成 |
```

## 手順書作成のベストプラクティス

### ✅ やるべきこと

```
1. 具体的に書く
   ❌ ボタンを押す
   ✅ 画面右上の「保存」ボタンをクリックする

2. 番号を振る
   ✅ 1. 〇〇する
      2. △△する
      3. □□する

3. 画像を付ける
   ✅ 重要な操作には必ず画像

4. 所要時間を書く
   ✅ 約30分（準備10分、実施15分、確認5分）

5. 完了条件を明確に
   ✅ 「成功しました」と表示されたら完了
```

### ❌ やってはいけないこと

```
1. 曖昧な表現
   ❌ 適当に設定する
   ❌ いい感じに調整する

2. 専門用語の乱用
   ❌ レジストリをいじって...
   ✅ レジストリ（Windowsの設定情報）を変更して...

3. 手順の飛ばし
   ❌ 1. ログインする
      2. 完了
   
   ✅ 1. ログインする
      2. メニューを開く
      3. 設定を変更する
      4. 保存する
      5. 完了を確認する

4. 前提条件の省略
   ❌ いきなり手順から始まる
   ✅ 前提条件を明記する
```

## 手順書テンプレート（コピペ用）

```markdown
# 【手順書タイトル】

## 1. 文書情報
- 作成日: 
- 作成者: 
- バージョン: 1.0

## 2. 目的


## 3. 対象者


## 4. 前提条件


## 5. 所要時間


## 6. 手順

### 6.1 準備
1. 

### 6.2 実施
1. 

### 6.3 完了確認
1. 

## 7. トラブルシューティング


## 8. 注意事項


## 9. 関連資料


## 10. 更新履歴
| 日付 | Ver | 更新者 | 内容 |
|------|-----|--------|------|
|  | 1.0 |  | 新規作成 |
```

## まとめ

```
良い手順書の5原則:

1. 明確性
   → 誰が読んでも同じ結果

2. 完全性
   → 必要な情報がすべて揃っている

3. 正確性
   → 間違いがない

4. 簡潔性
   → 無駄がない

5. 保守性
   → 更新しやすい
```

この形式で書けば、誰でも迷わず作業できる手順書が作れます！
