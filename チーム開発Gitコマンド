Git/GitHub の他の基本シーン別手順書を作ります！

## 【Git/GitHub 基本シーン別手順書 - 追加編】

---

## シーン13: プロジェクトに初めて参加する（初日）

### 状況
```
新しいプロジェクトにアサインされた
リポジトリのURLをもらった
```

### 手順

**1. リポジトリをクローン**
```bash
# 作業用ディレクトリに移動
cd ~/projects

# クローン
git clone https://github.com/company/project-name.git

# プロジェクトディレクトリに移動
cd project-name

# 確認
ls -la
```

**2. ブランチ構成を確認**
```bash
# ローカルブランチ
git branch

# リモートブランチも含む
git branch -a

# 出力例:
# * main
#   remotes/origin/HEAD -> origin/main
#   remotes/origin/main
#   remotes/origin/develop
#   remotes/origin/staging
```

**3. developブランチをチェックアウト（プロジェクトによる）**
```bash
# developブランチで作業する場合
git checkout develop
git pull origin develop

# または最新のmain
git checkout main
git pull origin main
```

**4. コミット履歴を確認**
```bash
# 最近のコミット10件
git log --oneline -10

# グラフ表示
git log --graph --oneline --all -20

# 特定のファイルの履歴
git log --oneline src/App.js
```

**5. コントリビューター確認**
```bash
# 貢献者一覧
git shortlog -sn

# 出力例:
#   145  田中太郎
#    89  佐藤花子
#    67  鈴木次郎
```

**6. READMEを読む**
```bash
# READMEを開く
cat README.md

# または
code README.md

確認事項:
□ プロジェクト概要
□ セットアップ手順
□ ブランチ戦略
□ コーディング規約
□ コミットメッセージ規則
```

**7. 環境構築**
```bash
# 依存関係インストール
npm install

# 環境変数設定
cp .env.example .env
code .env

# データベースセットアップ
npm run db:setup

# 開発サーバー起動
npm run dev
```

---

## シーン14: 作業を中断して別のタスクに移る

### 状況
```
機能Aを実装中
緊急でバグBの修正依頼が来た
現在の作業を保存したい
```

### 手順

**1. 現在の変更を一時保存**
```bash
# 状態確認
git status
# Changes not staged for commit:
#   modified:   src/FeatureA.js
#   modified:   src/utils.js

# 変更を一時保存
git stash save "WIP: 機能Aの実装途中"

# メッセージ表示
# Saved working directory and index state On feature/a: WIP: 機能Aの実装途中

# クリーンな状態になる
git status
# nothing to commit, working tree clean
```

**2. 緊急タスク用ブランチ作成**
```bash
# mainに移動
git checkout main
git pull origin main

# バグ修正ブランチ作成
git checkout -b fix/bug-b

# 修正作業...
code src/BuggyFile.js

# コミット
git add src/BuggyFile.js
git commit -m "fix: バグBを修正"
git push -u origin fix/bug-b

# PR作成してマージ
```

**3. 元の作業に戻る**
```bash
# 元のブランチに戻る
git checkout feature/a

# 保存した変更一覧を確認
git stash list
# stash@{0}: On feature/a: WIP: 機能Aの実装途中
# stash@{1}: On feature/b: WIP: 機能Bの実装途中

# 最新のstashを復元
git stash pop

# または特定のstashを指定
git stash pop stash@{0}

# 作業再開
git status
# Changes not staged for commit:
#   modified:   src/FeatureA.js
```

**stash の便利なコマンド:**
```bash
# 一覧表示（詳細）
git stash list

# 内容確認
git stash show stash@{0}

# 差分確認
git stash show -p stash@{0}

# 復元（stashは残す）
git stash apply stash@{0}

# 削除
git stash drop stash@{0}

# 全削除
git stash clear
```

---

## シーン15: 過去のコミットを確認・復元する

### 状況
```
昨日まで動いていた機能が壊れた
いつから壊れたのか調べたい
```

### 手順

**1. コミット履歴を確認**
```bash
# 最近のコミット
git log --oneline -20

# 出力例:
# abc1234 feat: 新機能追加
# def5678 fix: バグ修正
# ghi9012 refactor: リファクタリング
# jkl3456 feat: 機能実装
```

**2. 特定のコミット時点の状態を確認**
```bash
# コミットの詳細を見る
git show abc1234

# 特定ファイルの内容を見る
git show abc1234:src/App.js

# その時点の状態にチェックアウト
git checkout abc1234

# ⚠️ 「detached HEAD」状態になる
# Note: switching to 'abc1234'.
# You are in 'detached HEAD' state.
```

**3. 動作確認**
```bash
# その時点のコードで起動
npm install
npm run dev

# 確認
# → この時点では動いていた！
```

**4. 元に戻る**
```bash
# 最新の状態に戻る
git checkout main

# または作業ブランチに戻る
git checkout feature/my-branch
```

**5. 問題のあるコミットを特定**
```bash
# 2分探索で問題のコミットを特定（自動）
git bisect start
git bisect bad           # 現在のコミットは壊れている
git bisect good jkl3456  # このコミットは正常だった

# Gitが中間のコミットをチェックアウト
# 動作確認して報告
npm run dev
# 壊れている場合
git bisect bad
# 正常な場合
git bisect good

# 繰り返すと問題のコミットが特定される
# abc1234 is the first bad commit

# 終了
git bisect reset
```

**6. 特定のファイルだけ過去に戻す**
```bash
# 特定ファイルを過去のバージョンに戻す
git checkout jkl3456 -- src/App.js

# 確認
git status
# Changes to be committed:
#   modified:   src/App.js

# コミット
git commit -m "fix: App.jsを動作していたバージョンに戻す"
```

---

## シーン16: 他の人のブランチで作業を引き継ぐ

### 状況
```
同僚が休暇中
その人のブランチの作業を引き継ぐ
```

### 手順

**1. リモートの最新を取得**
```bash
git fetch origin
```

**2. 同僚のブランチをチェックアウト**
```bash
# リモートブランチ一覧確認
git branch -r
# origin/feature/colleague-work

# チェックアウト
git checkout -b feature/colleague-work origin/feature/colleague-work

# または
git checkout feature/colleague-work
```

**3. 状況を確認**
```bash
# コミット履歴
git log --oneline -5

# 変更ファイル
git diff main --name-only

# TODOコメント検索
grep -r "TODO" src/
```

**4. 作業を続ける**
```bash
# ファイル編集
code src/Component.js

# コミット
git add src/Component.js
git commit -m "feat: 機能の続きを実装"

# プッシュ
git push origin feature/colleague-work
```

**5. 引き継ぎメモを残す（PR）**
```markdown
## 引き継ぎ状況

### 完了済み
- [x] UI実装
- [x] API接続

### 未完了（追加実装）
- [x] バリデーション追加
- [x] エラーハンドリング
- [ ] ユニットテスト（次の担当者へ）

### 変更点
- バリデーションロジックを追加しました
- エラー時のトースト表示を実装しました

@colleague-name 引き継ぎました！
```

---

## シーン17: リリース作業（タグ付け）

### 状況
```
v1.5.0 をリリースする
タグを付けてリリースノートを作成
```

### 手順

**1. リリース準備**
```bash
# mainブランチの最新を取得
git checkout main
git pull origin main

# バージョン確認
cat package.json | grep version
# "version": "1.5.0"
```

**2. タグを作成**
```bash
# アノテーテッドタグ作成（推奨）
git tag -a v1.5.0 -m "Release v1.5.0"

# タグ確認
git tag -l
# v1.4.0
# v1.4.1
# v1.5.0

# タグの詳細確認
git show v1.5.0
```

**3. タグをプッシュ**
```bash
# 特定のタグをプッシュ
git push origin v1.5.0

# または全てのタグをプッシュ
git push origin --tags
```

**4. GitHub でリリース作成**
```
1. GitHubリポジトリページ
2. 「Releases」タブ
3. 「Create a new release」
4. タグを選択: v1.5.0
5. リリースノートを記入
```

**リリースノートの例:**
```markdown
## v1.5.0 (2025-10-31)

### 🚀 新機能
- ユーザープロフィール編集機能 (#123)
- 通知機能の追加 (#145)
- ダークモード対応 (#156)

### 🐛 バグ修正
- ログイン時のエラーを修正 (#134)
- レイアウト崩れを修正 (#142)

### 📝 改善
- パフォーマンス改善 (#150)
- エラーメッセージを分かりやすく (#155)

### 🔧 その他
- 依存関係の更新
- ドキュメント更新

### アップグレード方法
```bash
npm install
npm run migrate
```

### 破壊的変更
- APIのレスポンス形式が変更されました（詳細は #145 参照）
```

**5. タグの削除（間違えた場合）**
```bash
# ローカルのタグ削除
git tag -d v1.5.0

# リモートのタグ削除
git push origin --delete v1.5.0
```

---

## シーン18: .gitignore の設定

### 状況
```
不要なファイルをコミットしてしまった
.gitignore を設定したい
```

### 手順

**1. .gitignore ファイル作成**
```bash
# .gitignore が無い場合
touch .gitignore
code .gitignore
```

**2. よく使う .gitignore の例**
```gitignore
# ===== Node.js =====
node_modules/
npm-debug.log
yarn-error.log
.npm

# ===== 環境変数 =====
.env
.env.local
.env.*.local

# ===== IDE =====
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store

# ===== ビルド生成物 =====
dist/
build/
*.log

# ===== テスト =====
coverage/
.nyc_output/

# ===== OS =====
.DS_Store
Thumbs.db

# ===== 一時ファイル =====
tmp/
temp/
*.tmp
```

**3. 既にコミットしてしまったファイルを除外**
```bash
# Git管理から削除（ファイルは残す）
git rm --cached .env
git rm --cached -r node_modules/

# コミット
git commit -m "chore: 不要なファイルをGit管理から除外"

# プッシュ
git push
```

**4. グローバル .gitignore 設定**
```bash
# 自分のPCで常に無視するファイル
touch ~/.gitignore_global
code ~/.gitignore_global
```

**~/.gitignore_global の例:**
```gitignore
# OS
.DS_Store
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
```

**設定:**
```bash
git config --global core.excludesfile ~/.gitignore_global
```

---

## シーン19: 間違えてaddしたファイルを取り消す

### 状況
```
git add . してしまった
一部のファイルは含めたくない
```

### 手順

**まだコミットしていない場合:**

**1. ステージングを確認**
```bash
git status
# Changes to be committed:
#   new file:   src/Feature.js
#   modified:   .env
#   modified:   debug.log
```

**2. 特定のファイルをアンステージ**
```bash
# 1ファイル
git reset HEAD .env

# 複数ファイル
git reset HEAD .env debug.log

# 確認
git status
# Changes to be committed:
#   new file:   src/Feature.js
# Changes not staged for commit:
#   modified:   .env
#   modified:   debug.log
```

**3. 必要なファイルだけコミット**
```bash
git commit -m "feat: 新機能追加"
```

**すでにコミットした場合:**
```bash
# 直前のコミットを修正
git reset --soft HEAD~1

# ファイルをアンステージ
git reset HEAD .env debug.log

# .gitignore に追加
echo ".env" >> .gitignore
echo "*.log" >> .gitignore

# 再コミット
git add .gitignore src/Feature.js
git commit -m "feat: 新機能追加"
```

---

## シーン20: コミット履歴を綺麗にする（squash）

### 状況
```
細かいコミットが多すぎる
マージ前に1つにまとめたい
```

### 手順

**現在のコミット:**
```bash
git log --oneline -5
# abc1234 fix: typo
# def5678 fix: バグ修正
# ghi9012 feat: 機能追加の続き
# jkl3456 feat: 機能追加
# mno7890 (main) docs: ドキュメント更新
```

**1. インタラクティブrebase開始**
```bash
# 最新4コミットをまとめる
git rebase -i HEAD~4

# または、mainからのコミットをまとめる
git rebase -i main
```

**2. エディタが開く**
```
pick jkl3456 feat: 機能追加
pick ghi9012 feat: 機能追加の続き
pick def5678 fix: バグ修正
pick abc1234 fix: typo

# Commands:
# p, pick = use commit
# s, squash = use commit, but meld into previous commit
# f, fixup = like squash, but discard commit message
```

**3. squash に変更**
```
pick jkl3456 feat: 機能追加
squash ghi9012 feat: 機能追加の続き
squash def5678 fix: バグ修正
squash abc1234 fix: typo
```

**または fixup（コミットメッセージ不要の場合）:**
```
pick jkl3456 feat: 機能追加
fixup ghi9012 feat: 機能追加の続き
fixup def5678 fix: バグ修正
fixup abc1234 fix: typo
```

**4. 保存して閉じる**

**5. コミットメッセージを編集**
```
# squashの場合、全てのメッセージが表示される
# 不要なものを削除して、まとめたメッセージを書く

feat: ユーザープロフィール編集機能を実装

- プロフィール編集フォームUI
- バリデーション
- API連携
- テスト追加
```

**6. 保存して完了**
```bash
# 確認
git log --oneline -3
# xyz7890 feat: ユーザープロフィール編集機能を実装
# mno7890 (main) docs: ドキュメント更新
```

**7. 強制プッシュ**
```bash
# リモートを更新（すでにプッシュしていた場合）
git push --force-with-lease
```

---

## シーン21: GitHub Issue の作成・管理

### 状況
```
バグを見つけた / 新機能のアイデアがある
Issueを作成して管理したい
```

### 手順

**1. Issue作成（GitHub）**
```
1. リポジトリページの「Issues」タブ
2. 「New issue」ボタン
3. テンプレートを選択（あれば）
   - Bug report
   - Feature request
   - Custom
```

**バグレポートの例:**
```markdown
## バグの内容
ログインボタンをクリックしても反応しない

## 再現手順
1. ログインページを開く
2. メールアドレスとパスワードを入力
3. ログインボタンをクリック
4. 何も起こらない

## 期待される動作
ダッシュボードに遷移する

## 実際の動作
ボタンをクリックしても反応しない

## 環境
- OS: macOS 14.0
- ブラウザ: Chrome 119
- 画面サイズ: 1920x1080

## スクリーンショット
（画像を添付）

## エラーログ
```
Console error: TypeError: Cannot read property 'token' of undefined
```

## 優先度
高
```

**機能リクエストの例:**
```markdown
## 機能の概要
ダークモード対応

## 背景・理由
夜間に使用する際、画面が明るすぎて目が疲れる

## 提案する実装
- ヘッダーにダークモード切り替えトグル追加
- localStorage に設定を保存
- すべてのページでダークモードに対応

## 参考
- Notion のダークモード
- GitHub のダークモード

## 優先度
中
```

**2. ラベルを付ける**
```
種類:
- bug        : バグ
- enhancement: 新機能
- documentation: ドキュメント

優先度:
- priority: high   : 高
- priority: medium : 中
- priority: low    : 低

状態:
- good first issue : 初心者向け
- help wanted     : ヘルプ募集
```

**3. アサイン・マイルストーン設定**
```
右サイドバー:
- Assignees: 担当者を指定
- Labels: ラベル選択
- Projects: プロジェクトボード追加
- Milestone: v1.5.0 など
```

**4. Issueから直接ブランチ作成**
```
GitHub上で:
1. Issue ページ右サイドバー
2. 「Development」セクション
3. 「Create a branch」
4. ブランチ名が自動生成される
   例: 123-login-button-not-working
```

**ローカルで取得:**
```bash
git fetch origin
git checkout 123-login-button-not-working
```

**5. PRでIssueをリンク**
```markdown
## 関連Issue
Closes #123
Fixes #124
Resolves #125

（PRマージ時に自動でIssueがクローズされる）
```

**6. Issueにコメント**
```markdown
調査しました。原因は以下のようです：

```javascript
// token が undefined の場合の処理が不足
if (!user.token) {
  return;  // ← ここでエラーが出ている
}
```

修正PRを作成します。
```

---

## シーン22: Forkしてコントリビュートする（OSS）

### 状況
```
オープンソースプロジェクトにコントリビュートしたい
```

### 手順

**1. Fork する（GitHub）**
```
1. 元のリポジトリページ
2. 右上の「Fork」ボタン
3. 自分のアカウントにコピーされる
```

**2. Fork したリポジトリをクローン**
```bash
# 自分のForkをクローン
git clone https://github.com/your-name/project.git
cd project

# 元のリポジトリを upstream として追加
git remote add upstream https://github.com/original/project.git

# 確認
git remote -v
# origin    https://github.com/your-name/project.git (fetch)
# origin    https://github.com/your-name/project.git (push)
# upstream  https://github.com/original/project.git (fetch)
# upstream  https://github.com/original/project.git (push)
```

**3. 最新の状態に同期**
```bash
# upstreamから取得
git fetch upstream

# mainブランチを更新
git checkout main
git merge upstream/main
git push origin main
```

**4. 作業ブランチ作成**
```bash
git checkout -b fix/typo-in-readme

# 修正
code README.md

# コミット
git add README.md
git commit -m "docs: fix typo in README"

# 自分のForkにプッシュ
git push origin fix/typo-in-readme
```

**5. Pull Request作成**
```
1. 自分のForkのGitHubページ
2. 「Compare & pull request」ボタン
3. base repository: original/project (元のリポジトリ)
   base: main
   head repository: your-name/project (自分のFork)
   compare: fix/typo-in-readme
4. PRの説明を記入
```

**PRの例:**
```markdown
## 変更内容
READMEのタイポを修正しました。

## 修正箇所
- "recieve" → "receive"

## チェックリスト
- [x] CIが通る
- [x] CONTRIBUTING.mdを読んだ
- [x] コミットメッセージがガイドラインに従っている
```

**6. レビュー対応**
```bash
# フィードバックがあったら修正
code README.md

git add README.md
git commit -m "docs: レビュー指摘の修正"
git push origin fix/typo-in-readme

# PRが自動で更新される
```

**7. マージ後の後処理**
```bash
# 最新を取得
git fetch upstream
git checkout main
git merge upstream/main

# マージされたブランチを削除
git branch -d fix/typo-in-readme
git push origin --delete fix/typo-in-readme
```

---

## シーン23: Cherry-pick（特定のコミットだけ取り込む）

### 状況
```
developブランチの特定のバグ修正だけ
mainブランチに取り込みたい
```

### 手順

**1. 取り込みたいコミットを特定**
```bash
# developブランチのコミット履歴
git checkout develop
git log --oneline -10

# 出力例:
# abc1234 fix: ログインバグ修正 ← これを取り込みたい
# def5678 feat: 新機能A
# ghi9012 feat: 新機能B
```

**2. mainブランチに移動**
```bash
git checkout main
git pull origin main
```

**3. Cherry-pick実行**
```bash
# 特定のコミットを取り込む
git cherry-pick abc1234

# 成功すると
# [main xyz9999] fix: ログインバグ修正
```

**4. プッシュ**
```bash
git push origin main
```

**コンフリクトが発生した場合:**
```bash
# コンフリクト発生
# CONFLICT (content): Merge conflict in src/auth/login.js

# ファイルを修正
code src/auth/login.js

# 解決後
git add src/auth/login.js
git cherry-pick --continue

# 中止する場合
git cherry-pick --abort
```

**複数のコミットをcherry-pick:**
```bash
# 連続した複数コミット
git cherry-pick abc1234^..def5678

# 個別の複数コミット
git cherry-pick abc1234 def5678 ghi9012
```

---

## よくあるトラブルと解決法

### トラブル1: "Your branch and 'origin/xxx' have diverged"

```bash
# 原因: ローカルとリモートの履歴が異なる

# 解決法1: リモートの変更を優先
git fetch origin
git reset --hard origin/main

# 解決法2: ローカルの変更を優先（注意）
git push --force-with-lease

# 解決法3: 両方を統合
git pull --rebase
```

### トラブル2: "fatal: not a git repository"

```bash
# 原因: Gitリポジトリではないディレクトリ

# 解決法: 正しいディレクトリに移動
cd /path/to/project

# または新規リポジトリ初期化
git init
```

### トラブル3: "Permission denied (publickey)"

```bash
# 原因: SSH鍵が設定されていない

# 解決法1: SSH鍵を生成
ssh-keygen -t ed25519 -C "your_email@example.com"

# 公開鍵をGitHubに登録
cat ~/.ssh/id_ed25519.pub
# GitHubの Settings > SSH and GPG keys に追加

# 解決法2: HTTPSを使う
git remote set-url origin https://github.com/user/repo.git
```

### トラブル4: コミットに大きなファイルを含めてしまった

```bash
# コミットから大きなファイルを削除
git filter-branch --force --index-filter \
  "git rm --cached --ignore-unmatch path/to/large-file" \
  --prune-empty --tag-name-filter cat -- --all

# またはBFG Repo-Cleanerを使う（推奨）
# https://rtyley.github.io/bfg-repo-cleaner/
```

---

## Git設定のベストプラクティス

```bash
# ===== 基本設定 =====
git config --global user.name "山田太郎"
git config --global user.email "taro@example.com"

# ===== デフォルトブランチ =====
git config --global init.defaultBranch main

# ===== エディタ =====
git config --global core.editor "code --wait"

# ===== 差分ツール =====
git config --global diff.tool vscode
git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"

# ===== エイリアス =====
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.cm commit
git config --global alias.lg "log --graph --oneline --all"

# 使い方
git st  # git status
git lg  # git log --graph --oneline --all

# ===== 改行コード =====
# Windows
git config --global core.autocrlf true

# Mac/Linux
git config --global core.autocrlf input

# ===== カラー表示 =====
git config --global color.ui auto

# ===== プルの戦略 =====
git config --global pull.rebase false  # merge（デフォルト）
# または
git config --global pull.rebase true   # rebase
```

---

## まとめ - よく使うコマンド一覧

```bash
# ===== 毎日使う =====
git status
git add .
git commit -m "message"
git push
git pull

# ===== よく使う =====
git checkout -b branch-name
git branch
git merge branch-name
git stash
git stash pop
git log --oneline

# ===== たまに使う =====
git rebase main
git cherry-pick abc1234
git tag -a v1.0.0
git reset HEAD~1
git revert HEAD

# ===== 緊急時 =====
git reflog  # 履歴を遡る最終手段
git reset --hard abc1234
git push --force-with-lease
```

これで基本的なGitシーンは網羅できました！困ったときに参照してください！


チーム開発でのGit/GitHub シーン別手順書を作ります！

## 【Git/GitHub チーム開発 シーン別手順書】

---

## シーン1: 新しい機能を開発する

### 状況
```
タスク: ユーザープロフィール編集機能を実装する
Issue番号: #123
```

### 手順

**1. Issueを確認（GitHub）**
```
1. GitHubでIssue #123を開く
2. 内容を確認
   - 要件
   - 受け入れ基準
   - 参考資料
3. 自分にアサイン
4. ラベルを「In Progress」に変更
```

**2. 最新のmainブランチを取得**
```bash
# mainブランチに移動
git checkout main

# 最新を取得
git pull origin main

# 確認
git log --oneline -3
```

**3. 作業ブランチを作成**
```bash
# Issue番号を含めたブランチ名
git checkout -b feature/123-user-profile-edit

# ブランチ確認
git branch
# * feature/123-user-profile-edit
#   main
```

**4. 実装する**
```bash
# ファイルを編集
code src/components/UserProfile.jsx

# 保存したら状態確認
git status

# 差分確認
git diff
```

**5. こまめにコミット**
```bash
# ステージング
git add src/components/UserProfile.jsx

# コミット
git commit -m "feat: プロフィール編集フォームを追加"

# さらに実装...
git add src/api/user.js
git commit -m "feat: プロフィール更新APIを実装"

# テスト追加
git add tests/UserProfile.test.js
git commit -m "test: プロフィール編集のテストを追加"
```

**6. リモートにプッシュ**
```bash
# 初回プッシュ
git push -u origin feature/123-user-profile-edit

# 2回目以降
git push
```

**7. Pull Request作成（GitHub）**
```markdown
## 概要
Issue #123 ユーザープロフィール編集機能を実装しました。

## 変更内容
- [ ] プロフィール編集フォームUI実装
- [ ] プロフィール更新API実装
- [ ] バリデーション追加
- [ ] ユニットテスト追加

## 動作確認
- [x] プロフィール画面から編集画面に遷移できる
- [x] 情報を編集して保存できる
- [x] エラー時に適切なメッセージが表示される

## スクリーンショット
![before](https://...)
![after](https://...)

## テスト
```bash
npm test
```

## Closes
Closes #123

## レビュアー
@mentor-name @team-lead
```

**8. レビュー対応を待つ**
```
□ CI/CDが通るのを確認
□ レビューコメントに対応
□ 承認されたらマージ
```

---

## シーン2: 他の人のコードをレビューする

### 状況
```
同僚のPRにレビュー依頼が来た
PR: #456 "ログイン機能の改善"
```

### 手順

**1. PRをローカルで確認**
```bash
# PRのブランチを取得
git fetch origin

# PRのブランチをチェックアウト
git checkout -b review-pr-456 origin/feature/login-improvement

# または GitHub CLI使用
gh pr checkout 456
```

**2. コードを確認**
```bash
# 変更ファイル一覧
git diff main --name-only

# 差分を確認
git diff main

# ファイルごとに確認
git diff main src/auth/login.js
```

**3. 動作確認**
```bash
# 依存関係をインストール
npm install

# 開発サーバー起動
npm run dev

# テスト実行
npm test

# Lint確認
npm run lint
```

**4. GitHubでレビューコメント**

**良いコメント例:**
```markdown
✅ 承認できる場合:
「LGTM！🎉 ログイン処理が明確になっていて良いですね。
エラーハンドリングもしっかりしています。」

💬 質問・提案の場合:
「この部分、もう少し詳しく教えてください。
なぜこのアプローチを選んだのでしょうか？」

「ここは `async/await` を使った方が読みやすいかもしれません。
```javascript
const user = await fetchUser(id);
```
いかがでしょうか？」

⚠️ 問題がある場合:
「この処理だとエラー時にユーザーに通知されません。
catch句でトースト表示を追加できますか？」
```

**コメントの付け方:**
```
1. GitHubのPRページでFiles changedタブ
2. 該当行の「+」ボタンをクリック
3. コメントを記入
4. 「Start a review」をクリック
5. すべて確認したら「Review changes」
6. コメントタイプを選択:
   - Comment: 一般的なコメント
   - Approve: 承認
   - Request changes: 修正依頼
```

**5. レビュー完了**
```
承認する場合:
□ 「Approve」を選択
□ 承認コメントを書く
□ 「Submit review」

修正依頼の場合:
□ 「Request changes」を選択
□ 修正してほしい理由を明確に書く
□ 「Submit review」
```

---

## シーン3: レビューで修正依頼が来た

### 状況
```
自分のPRにレビューコメントが付いた
修正が必要
```

### 手順

**1. コメントを確認**
```
GitHub PR画面:
□ すべてのコメントを読む
□ 不明点があれば質問を返す
□ 修正方針を考える
```

**2. ローカルで修正**
```bash
# 作業ブランチにいることを確認
git branch
# * feature/123-user-profile-edit

# ファイルを修正
code src/components/UserProfile.jsx

# 修正内容を確認
git diff
```

**3. コミット**
```bash
# 修正をコミット
git add src/components/UserProfile.jsx
git commit -m "fix: レビュー指摘の修正 - エラーハンドリング追加"

# プッシュ
git push
```

**4. GitHubで返信**
```markdown
指摘ありがとうございます！
エラーハンドリングを追加しました。

修正内容:
- try-catch でエラーをキャッチ
- トースト通知を表示
- ローディング状態を解除

確認お願いします！
```

**5. 追加の修正があれば繰り返す**
```bash
# 別の修正
git add .
git commit -m "fix: バリデーションロジックを改善"
git push
```

**6. 全て対応したら報告**
```markdown
@reviewer-name
すべての指摘に対応しました！
再度レビューをお願いできますでしょうか？
```

---

## シーン4: mainブランチが進んでいて最新化したい

### 状況
```
自分の作業中にmainブランチが更新された
最新の変更を取り込みたい
```

### 手順

**方法1: rebase（推奨）**
```bash
# 作業中の変更を一時保存（必要に応じて）
git stash

# mainの最新を取得
git checkout main
git pull origin main

# 作業ブランチに戻る
git checkout feature/123-user-profile-edit

# mainの変更を取り込む
git rebase main

# コンフリクトがなければ完了

# 強制プッシュ（リモートを更新済みの場合）
git push --force-with-lease

# 一時保存した変更を戻す
git stash pop
```

**方法2: merge（簡単）**
```bash
# 作業ブランチで
git checkout feature/123-user-profile-edit

# mainをマージ
git pull origin main

# または
git fetch origin
git merge origin/main

# プッシュ
git push
```

**コンフリクトが発生した場合:**
```bash
# コンフリクトファイルを確認
git status
# both modified:   src/components/Header.jsx

# ファイルを開いて修正
code src/components/Header.jsx

# コンフリクト解決後
git add src/components/Header.jsx

# rebaseの場合
git rebase --continue

# mergeの場合
git commit

# プッシュ
git push
```

---

## シーン5: 間違えてコミットした

### シーン5-1: コミットメッセージを修正したい

```bash
# 直前のコミットメッセージを修正
git commit --amend

# エディタが開くのでメッセージ修正
# 保存して閉じる

# すでにプッシュ済みの場合
git push --force-with-lease
```

### シーン5-2: ファイルの追加を忘れた

```bash
# ファイルを追加
git add forgotten-file.js

# 直前のコミットに追加
git commit --amend --no-edit

# プッシュ
git push --force-with-lease
```

### シーン5-3: コミットを取り消したい

**まだプッシュしていない場合:**
```bash
# コミットを取り消し（変更は残る）
git reset HEAD~1

# 変更も全て取り消す（危険！）
git reset --hard HEAD~1
```

**すでにプッシュした場合:**
```bash
# revert（推奨）- 取り消しコミットを作成
git revert HEAD

# コミットメッセージを編集
# 保存して閉じる

# プッシュ
git push
```

### シーン5-4: 間違ったブランチにコミットした

```bash
# 例: mainに直接コミットしてしまった

# 1. コミットを一時保存
git log --oneline -1
# abc1234 feat: 新機能追加

# 2. 正しいブランチを作成
git branch feature/new-feature

# 3. mainから削除
git reset --hard HEAD~1

# 4. 正しいブランチに移動
git checkout feature/new-feature

# コミットが残っている
git log --oneline -1
```

---

## シーン6: 緊急のバグ修正（Hotfix）

### 状況
```
本番環境で重大なバグ発見
すぐに修正が必要
```

### 手順

**1. 緊急対応開始**
```bash
# mainから直接ブランチ作成
git checkout main
git pull origin main
git checkout -b hotfix/critical-login-bug

# Slackで報告
#incidents チャンネル:
「🚨 ログインバグの緊急修正を開始します
ブランチ: hotfix/critical-login-bug」
```

**2. 最小限の修正**
```bash
# バグのあるファイルのみ修正
code src/auth/login.js

# 修正内容を確認
git diff

# コミット
git add src/auth/login.js
git commit -m "hotfix: ログイン時のnull参照エラーを修正"

# プッシュ
git push -u origin hotfix/critical-login-bug
```

**3. 迅速なレビュー**
```
GitHub PR作成:

## 🚨 緊急修正

### バグの内容
ユーザーがログインできない

### 原因
tokenがnullの場合のハンドリングが不足

### 修正内容
```javascript
if (!token) {
  return null;
}
```

### 動作確認
- [x] ログインできる
- [x] エラーが出ない

### レビュアー
@tech-lead （緊急のため即レビュー希望）
```

**4. 即座にマージ・デプロイ**
```bash
# レビュー承認後すぐにマージ

# mainにマージ
git checkout main
git pull origin main
git merge hotfix/critical-login-bug

# タグ作成
git tag -a v1.2.4-hotfix -m "Hotfix: ログインバグ修正"
git push origin v1.2.4-hotfix

# デプロイ
npm run deploy:production

# 動作確認
curl https://api.example.com/health
```

**5. 他のブランチにも反映**
```bash
# developブランチにも反映
git checkout develop
git pull origin develop
git merge hotfix/critical-login-bug
git push origin develop

# 作業中の全員に通知
Slack #dev-team:
「hotfixをマージしました。
作業中のブランチをrebaseしてください」
```

**6. 完了報告**
```
#incidents チャンネル:
「✅ ログインバグ修正完了

修正内容: null参照エラーの対処
デプロイ時刻: 15:30
確認済み: 正常に動作

事後対応:
- [ ] ポストモーテム作成
- [ ] 再発防止策検討」
```

---

## シーン7: 大規模な機能開発（フィーチャーブランチ戦略）

### 状況
```
大規模機能: 決済システム実装
複数人で分担
期間: 2週間
```

### 手順

**1. フィーチャーブランチ作成**
```bash
# メインのフィーチャーブランチ
git checkout main
git pull origin main
git checkout -b feature/payment-system

# プッシュ
git push -u origin feature/payment-system
```

**2. サブタスクごとにブランチ作成**
```bash
# 担当者A: 決済フォーム
git checkout feature/payment-system
git checkout -b feature/payment-system-form

# 担当者B: API実装
git checkout feature/payment-system
git checkout -b feature/payment-system-api

# 担当者C: データベース設計
git checkout feature/payment-system
git checkout -b feature/payment-system-db
```

**3. それぞれ実装してPR**
```
PRのベースブランチ:
main ← feature/payment-system（最終）
feature/payment-system ← feature/payment-system-form（サブ）
feature/payment-system ← feature/payment-system-api（サブ）
feature/payment-system ← feature/payment-system-db（サブ）
```

**4. サブブランチをマージ**
```bash
# レビュー承認後、feature/payment-systemにマージ
# GitHub上でマージ

# ローカルで更新
git checkout feature/payment-system
git pull origin feature/payment-system
```

**5. 統合テスト**
```bash
# feature/payment-systemで全体テスト
git checkout feature/payment-system
npm test
npm run test:e2e
```

**6. mainにマージ**
```bash
# すべてのサブタスク完了後
# feature/payment-system → main のPR作成
# 承認後マージ
```

---

## シーン8: コンフリクト解決（複雑な場合）

### 状況
```
mainをマージしたらコンフリクト発生
複数ファイルで競合
```

### 手順

**1. コンフリクトファイルを確認**
```bash
git status

# Unmerged paths:
#   both modified:   src/components/Header.jsx
#   both modified:   src/utils/format.js
#   both modified:   package.json
```

**2. VS Codeで解決**
```
1. VS Codeでファイルを開く
2. コンフリクト箇所が色分けされている

┌────────────────────────────────┐
│ Accept Current Change          │ ← 自分の変更を採用
│ Accept Incoming Change         │ ← 相手の変更を採用
│ Accept Both Changes            │ ← 両方を採用
│ Compare Changes                │ ← 差分を比較
└────────────────────────────────┘

3. 適切なものを選択
4. 必要に応じて手動で編集
```

**3. ファイルごとに解決**
```bash
# 解決したファイルをステージング
git add src/components/Header.jsx

# 次のファイル
code src/utils/format.js
# 解決
git add src/utils/format.js

# package.json（特殊）
npm install  # lockファイル再生成
git add package.json package-lock.json
```

**4. コンフリクト解決を完了**
```bash
# rebaseの場合
git rebase --continue

# mergeの場合
git commit

# プッシュ
git push
```

**5. 動作確認**
```bash
# テスト実行
npm test

# 開発サーバー起動
npm run dev

# 問題なければPRに報告
```

---

## シーン9: 複数人で同じファイルを編集

### 状況
```
同僚と同じファイルを編集している
コンフリクトを避けたい
```

### 対策

**1. 事前に連絡**
```
Slack #dev-team:
「Header.jsxを編集します。
誰か同じファイル触ってますか？」

返信あり:
「すみません、私も触ってます。
先にマージさせてもらえますか？」
```

**2. こまめにpull**
```bash
# 作業前に毎回
git pull origin main

# または rebase
git pull --rebase origin main
```

**3. 小さい単位でコミット**
```bash
# 機能ごとに細かくコミット
git commit -m "feat: ヘッダーにロゴ追加"
git commit -m "feat: ヘッダーにメニュー追加"
git commit -m "style: ヘッダーのスタイル調整"
```

**4. 早めにPR**
```
作業完了したらすぐPR
→ レビュー
→ マージ
→ 他の人が最新を取得
```

---

## シーン10: 誤ってmainを直接編集してしまった

### 状況
```
ブランチを切り忘れてmainで作業
まだコミットしていない
```

### 手順

**変更をまだコミットしていない場合:**
```bash
# 変更を確認
git status

# 新しいブランチを作成して移動
git checkout -b feature/forgot-branch

# 変更がそのままブランチに移る
git status

# コミット
git add .
git commit -m "feat: 機能追加"
git push -u origin feature/forgot-branch
```

**すでにコミットした場合:**
```bash
# mainでコミットしてしまった

# 新しいブランチを作成（コミットを持っていく）
git branch feature/forgot-branch

# mainを1つ前に戻す
git reset --hard HEAD~1

# 新しいブランチに移動
git checkout feature/forgot-branch

# プッシュ
git push -u origin feature/forgot-branch
```

**すでにプッシュしてしまった場合:**
```bash
# ⚠️ 要注意：チームに確認必須

# 1. すぐにSlackで報告
「すみません、mainに直接プッシュしてしまいました」

# 2. revert（安全）
git revert HEAD
git push origin main

# 3. 正しいブランチで作業し直す
git checkout -b feature/correct-branch
# 再実装してPR
```

---

## シーン11: PR がマージされたブランチを削除

### 手順

**GitHub上で削除:**
```
1. マージ完了後に表示される
   「Delete branch」ボタンをクリック

2. または Branches ページから
   - 「Your branches」タブ
   - 削除したいブランチの🗑️をクリック
```

**ローカルで削除:**
```bash
# mainに移動
git checkout main

# 最新を取得
git pull origin main

# マージ済みブランチを確認
git branch --merged

# ローカルブランチ削除
git branch -d feature/123-user-profile-edit

# リモート追跡ブランチも削除
git fetch --prune

# または個別に
git push origin --delete feature/123-user-profile-edit
```

**一括削除:**
```bash
# マージ済みのローカルブランチを全削除
git branch --merged | grep -v "\*\|main\|develop" | xargs git branch -d

# リモート追跡ブランチをクリーンアップ
git remote prune origin
```

---

## シーン12: GitHub Actions（CI/CD）が失敗

### 状況
```
PRを作ったらCIが失敗
テストやLintでエラー
```

### 手順

**1. エラー内容を確認**
```
GitHub PR画面:
1. 「Details」をクリック
2. ログを確認

エラー例:
❌ Test failed
❌ Lint errors
❌ Build failed
```

**2. ローカルで再現**
```bash
# テスト実行
npm test

# Lint実行
npm run lint

# ビルド確認
npm run build
```

**3. 修正**
```bash
# テストエラーの場合
code tests/UserProfile.test.js
# 修正

npm test  # 通ることを確認

# Lintエラーの場合
npm run lint:fix  # 自動修正

# 手動修正が必要な場合
code src/components/Header.jsx
```

**4. コミット・プッシュ**
```bash
git add .
git commit -m "fix: テストとLintエラーを修正"
git push

# CI が再実行される
```

**5. CI通過を確認**
```
GitHub PR画面:
✅ All checks have passed
```

---

## よく使うGitコマンド早見表

```bash
# ===== 基本操作 =====
git status              # 状態確認
git log --oneline       # コミット履歴
git diff                # 変更差分
git diff --staged       # ステージング済みの差分

# ===== ブランチ操作 =====
git branch              # ブランチ一覧
git branch -a           # リモート含む全ブランチ
git checkout -b name    # ブランチ作成・移動
git branch -d name      # ブランチ削除
git push origin --delete name  # リモートブランチ削除

# ===== 同期 =====
git pull                # 取得してマージ
git pull --rebase       # 取得してrebase
git fetch               # 取得のみ
git push                # プッシュ
git push --force-with-lease  # 安全な強制プッシュ

# ===== 取り消し =====
git reset HEAD~1        # コミット取り消し（変更残す）
git reset --hard HEAD~1 # コミット取り消し（変更も削除）
git revert HEAD         # 取り消しコミット作成
git checkout -- file    # ファイルの変更を破棄

# ===== 一時保存 =====
git stash               # 変更を一時保存
git stash list          # 一覧
git stash pop           # 戻す
git stash drop          # 削除

# ===== コミット修正 =====
git commit --amend      # 直前のコミット修正
git rebase -i HEAD~3    # 複数コミットを編集

# ===== 便利コマンド =====
git log --graph --oneline --all  # グラフ表示
git blame file          # 行ごとの変更者
git show commit-hash    # コミット詳細
git cherry-pick hash    # 特定コミットを取り込む
```

---

## チーム開発のベストプラクティス

### ✅ やるべきこと

```
□ mainブランチは常に動く状態に保つ
□ 機能ごとにブランチを切る
□ コミットメッセージは明確に書く
□ こまめにpush（1日1回以上）
□ PRは小さく保つ（500行以内推奨）
□ レビューは24時間以内に対応
□ コンフリクトはすぐ解決
□ マージ後はブランチ削除
□ CIが通ってからマージ
□ デプロイ前にチームに通知
```

### ❌ やってはいけないこと

```
□ mainに直接プッシュ
□ force push（共有ブランチ）
□ 大きすぎるPR（1000行以上）
□ コミットメッセージが不明確
□ レビューなしでマージ
□ テストなしでマージ
□ 長期間放置されたブランチ
□ コンフリクトを放置
□ バイナリファイルをコミット
□ パスワードやAPIキーをコミット
```

---

## トラブル時のチェックリスト

```
□ git status で状態確認
□ git log で履歴確認
□ エラーメッセージを読む
□ ググる（エラーメッセージで検索）
□ チームメンバーに相談
□ 最悪の場合：
  git stash
  git checkout main
  git pull
  最初からやり直す
```

---

## まとめ

```
チーム開発の基本フロー:

1. Issue確認
2. ブランチ作成
3. 実装
4. コミット
5. プッシュ
6. PR作成
7. レビュー
8. 修正
9. マージ
10. ブランチ削除

困ったら:
- ログを見る
- メンターに相談
- Slackで質問
```

このシーン別手順書を参考に、安全にGit/GitHubを使ってください！
